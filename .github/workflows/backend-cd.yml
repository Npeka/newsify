name: Backend Service CD

on:
  push: # push policy
    branches: [ main, dev ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-cd.yml'
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: 'backend/pnpm-lock.yaml'
      
      - name: Install dependencies
        working-directory: ./backend
        run: pnpm install
      
      - name: Build application
        working-directory: ./backend
        run: pnpm build

      - name: Run unit tests (with Jest)
        working-directory: ./backend
        run: pnpm test

      - name: Run test coverage (with Jest)
        working-directory: ./backend
        run: pnpm test:cov

      - name: Install jq and bc
        run: |
            sudo apt-get update
            sudo apt-get install -y jq bc

      - name: Display test coverage summary
        run: cat backend/coverage/coverage-summary.json | jq .

      - name: Check coverage threshold (40% lines)
        run: |
            COVERAGE=$(cat backend/coverage/coverage-summary.json | jq '.total.lines.pct')
            echo "Line coverage: $COVERAGE%"
            if (( $(echo "$COVERAGE < 40" | bc -l) )); then
              echo "Coverage is below threshold of 40%!"
              exit 1
            else
              echo "Coverage meets threshold."
            fi
            mv backend/coverage/lcov-report coverage_report

      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v4
        with:
            name: coverage_report
            path: coverage_report

  deploy-test-coverage:
    needs: build
    runs-on: ubuntu-latest
    permissions:
        contents: write

    steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Download Coverage Report Artifact
          uses: actions/download-artifact@v4
          with:
              name: coverage_report
              path: coverage_report

        - name: Deploy to GitHub Pages
          uses: JamesIves/github-pages-deploy-action@v4
          with:
              branch: gh-pages
              folder: coverage_report
              clean: true
    
  push-images:
    needs: deploy-test-coverage
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.determine_tag.outputs.tag }}
      env: ${{ steps.determine_tag.outputs.env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Determine image tag
        id: determine_tag
        run: |
          # Get short commit SHA
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          # Extract branch name from GITHUB_REF
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          echo "Debug: BRANCH_NAME = $BRANCH_NAME"
          echo "Debug: SHORT_SHA = $SHORT_SHA"
          
          # Determine the tag based on branch
          if [[ "$BRANCH_NAME" == "main" ]]; then
            TAG="main-${SHORT_SHA}"
            ENV="staging"
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            TAG="dev-${SHORT_SHA}"
            ENV="dev"
          else
            # For any other branch, use branch name + commit SHA
            SAFE_BRANCH_NAME=$(echo $BRANCH_NAME | sed 's/\//-/g')
            TAG="${SAFE_BRANCH_NAME}-${SHORT_SHA}"
            ENV="${SAFE_BRANCH_NAME}"
          fi
          
          echo "Generated TAG: $TAG"
          echo "Generated ENV: $ENV"
          
          # Set outputs directly - this will be used by the job outputs
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "env=$ENV" >> $GITHUB_OUTPUT

          cat $GITHUB_OUTPUT
          
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/newsify-backend:${{ steps.determine_tag.outputs.tag }}
          build-args: |
            SERVER_PORT=${{ secrets.SERVER_PORT || '8080' }}
            ENV=${{ secrets.ENV || 'development' }}
            DO_DB_NAME=${{ secrets.DO_DB_NAME }}
            DO_DB_PORT=${{ secrets.DO_DB_PORT }}
            DO_DB_HOST=${{ secrets.DO_DB_HOST }}
            DO_DB_USERNAME=${{ secrets.DO_DB_USERNAME }}
            DO_DB_PASSWORD=${{ secrets.DO_DB_PASSWORD }}
            SALT=${{ secrets.SALT }}
            AT_SECRET=${{ secrets.AT_SECRET }}
            RT_SECRET=${{ secrets.RT_SECRET }}
            MAIL_HOST=${{ secrets.MAIL_HOST }}
            MAIL_PORT=${{ secrets.MAIL_PORT }}
            MAIL_USER=${{ secrets.MAIL_USER }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            MAIL_FROM=${{ secrets.MAIL_FROM }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_USER=${{ secrets.REDIS_USER }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_ENDPOINT=${{ secrets.OPENAI_ENDPOINT }}
            OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}
            ELS_IP=${{ secrets.ELS_IP }}
            ELS_USERNAME=${{ secrets.ELS_USERNAME }}
            ELS_PASSWORD=${{ secrets.ELS_PASSWORD }}
            MILVUS_ADDRESS=${{ secrets.MILVUS_ADDRESS }}
            MILVUS_TOKEN=${{ secrets.MILVUS_TOKEN }}

  update-infrastructure:
    needs: push-images
    uses: ./.github/workflows/infrastructure-update.yml
    with:
      service: backend
      tag: ${{ needs.push-images.outputs.tag }}
      env: ${{ needs.push-images.outputs.env }}
      source_branch: ${{ github.ref_name }}
    secrets:
      ARGOCD_GITHUB_TOKEN: ${{ secrets.ARGOCD_GITHUB_TOKEN }}

  notify-success:
    needs: [push-images, update-infrastructure]
    uses: ./.github/workflows/notification.yml
    if: success()
    with:
      service_name: 'Backend'
      status: 'success'
      tag: ${{ needs.push-images.outputs.tag }}
      environment: ${{ needs.push-images.outputs.env }}
      notification_type: 'email'
    secrets:
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      NOTIFICATION_EMAILS: ${{ secrets.NOTIFICATION_EMAILS }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}

  notify-failure:
    needs: [build, deploy-test-coverage, push-images, update-infrastructure]
    uses: ./.github/workflows/notification.yml
    if: failure()
    with:
      service_name: 'Backend'
      status: 'failure'
      notification_type: 'email'
    secrets:
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      NOTIFICATION_EMAILS: ${{ secrets.NOTIFICATION_EMAILS }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}